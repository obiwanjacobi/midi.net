<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="MidiBufferManager_BufferNotDone" xml:space="preserve">
    <value>Specified MidiBuffer is not marked as 'Done'.</value>
    <comment>Exception text</comment>
  </data>
  <data name="MidiBufferManager_BufferStillInQueue" xml:space="preserve">
    <value>Specified MidiBuffer is still enqueued by the Midi Port.</value>
    <comment>Exception text</comment>
  </data>
  <data name="MidiBufferManager_HeaderNotAttached" xml:space="preserve">
    <value>The specified MidiHeader does not belong to any MidiBuffer.</value>
    <comment>Exception text</comment>
  </data>
  <data name="MidiBufferManager_HeaderOutOfSync" xml:space="preserve">
    <value>The specified MidiHeader is not in sync with the MidiBuffer that owns it.</value>
    <comment>Exception text</comment>
  </data>
  <data name="MidiBufferStream_PositionTooLong" xml:space="preserve">
    <value>The MidiStream too long.</value>
    <comment>Exception text</comment>
  </data>
  <data name="MidiInPort_PortNotOpen" xml:space="preserve">
    <value>The Midi In Port is not open.</value>
    <comment>Exception text</comment>
  </data>
  <data name="MidiInPort_BufferManagerNotInitialzed" xml:space="preserve">
    <value>Cannot start the Midi In Port because the BufferManager has not been initialized. Call Initialize on the MidiInBufferManager.</value>
    <comment>Exception text</comment>
  </data>
  <data name="MidiInPort_CannotChangeReceiver" xml:space="preserve">
    <value>The Midi receiver can not be changed when the Midi In Port is started.</value>
    <comment>Exception text</comment>
  </data>
  <data name="MidiInPort_NoReceiver" xml:space="preserve">
    <value>The MidiInPort is not connected to a MidiReceiver</value>
    <comment>Exception text</comment>
  </data>
  <data name="MidiPort_InvalidStatus" xml:space="preserve">
    <value>Invalid port status ({0}).</value>
    <comment>Exception text</comment>
  </data>
  <data name="MidiPort_ObjectDisposed" xml:space="preserve">
    <value>The MidiPort of type {0} has been disposed.</value>
    <comment>Exception text</comment>
  </data>
  <data name="MidiReceiverChainManager_EndOfChain" xml:space="preserve">
    <value>End of Chain! Last Receiver added did not implement IMidiReceiverChain.</value>
    <comment>Exception text</comment>
  </data>
  <data name="MidiStream_CountTooLarge" xml:space="preserve">
    <value>Parameter 'count' is larger than specified buffer length.</value>
    <comment>Exception text</comment>
  </data>
  <data name="MidiStream_EndOfStream" xml:space="preserve">
    <value>End of stream.</value>
    <comment>Exception text</comment>
  </data>
  <data name="MidiStream_NotReadable" xml:space="preserve">
    <value>Not a readable stream.</value>
    <comment>Exception text</comment>
  </data>
  <data name="MidiStream_NotSeekable" xml:space="preserve">
    <value>Cannot seek in stream.</value>
    <comment>Exception text</comment>
  </data>
  <data name="MidiStream_NotWritable" xml:space="preserve">
    <value>Not a writable stream.</value>
    <comment>Exception text</comment>
  </data>
  <data name="MidiStreamOutPort_InvalidTimeFormatType" xml:space="preserve">
    <value>You cannot specify TimeFormatType.Smpte. Use the GetSmpteTime() method instead.</value>
    <comment>Exception text</comment>
  </data>
  <data name="MidiStreamOutPort_NoShortMessage" xml:space="preserve">
    <value>The MidiStreamOutPort does not support short midi messages.</value>
    <comment>Exception text</comment>
  </data>
  <data name="MidiStreamWriter_StreamNotWritable" xml:space="preserve">
    <value>Not a writable stream.</value>
    <comment>Exception text</comment>
  </data>
  <data name="MidiOutPort_PortNotOpen" xml:space="preserve">
    <value>The Midi Out Port is not open.</value>
    <comment>Exception text</comment>
  </data>
</root>