//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by xsd, Version=4.0.30319.1.
// 
namespace CannedBytes.Midi.Xml {
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.midi.org/MIDIEvents10")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
    public partial class NoteOn : object, System.ComponentModel.INotifyPropertyChanged {
        
        private Channel channelField;
        
        private bool channelFieldSpecified;
        
        private string noteField;
        
        private string velocityField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public Channel Channel {
            get {
                return this.channelField;
            }
            set {
                this.channelField = value;
                this.RaisePropertyChanged("Channel");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChannelSpecified {
            get {
                return this.channelFieldSpecified;
            }
            set {
                this.channelFieldSpecified = value;
                this.RaisePropertyChanged("ChannelSpecified");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Note {
            get {
                return this.noteField;
            }
            set {
                this.noteField = value;
                this.RaisePropertyChanged("Note");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Velocity {
            get {
                return this.velocityField;
            }
            set {
                this.velocityField = value;
                this.RaisePropertyChanged("Velocity");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.midi.org/MIDIEvents10")]
    public enum Channel {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        Item4,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5")]
        Item5,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6")]
        Item6,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7")]
        Item7,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("8")]
        Item8,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("9")]
        Item9,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("10")]
        Item10,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("11")]
        Item11,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("12")]
        Item12,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("13")]
        Item13,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("14")]
        Item14,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("15")]
        Item15,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("16")]
        Item16,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.midi.org/MIDIEvents10")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
    public partial class NoteOff : object, System.ComponentModel.INotifyPropertyChanged {
        
        private Channel channelField;
        
        private bool channelFieldSpecified;
        
        private string noteField;
        
        private string velocityField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public Channel Channel {
            get {
                return this.channelField;
            }
            set {
                this.channelField = value;
                this.RaisePropertyChanged("Channel");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChannelSpecified {
            get {
                return this.channelFieldSpecified;
            }
            set {
                this.channelFieldSpecified = value;
                this.RaisePropertyChanged("ChannelSpecified");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Note {
            get {
                return this.noteField;
            }
            set {
                this.noteField = value;
                this.RaisePropertyChanged("Note");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Velocity {
            get {
                return this.velocityField;
            }
            set {
                this.velocityField = value;
                this.RaisePropertyChanged("Velocity");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.midi.org/MIDIEvents10")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
    public partial class PolyKeyPressure : object, System.ComponentModel.INotifyPropertyChanged {
        
        private Channel channelField;
        
        private bool channelFieldSpecified;
        
        private string noteField;
        
        private string pressureField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public Channel Channel {
            get {
                return this.channelField;
            }
            set {
                this.channelField = value;
                this.RaisePropertyChanged("Channel");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChannelSpecified {
            get {
                return this.channelFieldSpecified;
            }
            set {
                this.channelFieldSpecified = value;
                this.RaisePropertyChanged("ChannelSpecified");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Note {
            get {
                return this.noteField;
            }
            set {
                this.noteField = value;
                this.RaisePropertyChanged("Note");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Pressure {
            get {
                return this.pressureField;
            }
            set {
                this.pressureField = value;
                this.RaisePropertyChanged("Pressure");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.midi.org/MIDIEvents10")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
    public partial class ControlChange : object, System.ComponentModel.INotifyPropertyChanged {
        
        private Channel channelField;
        
        private bool channelFieldSpecified;
        
        private string controlField;
        
        private string valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public Channel Channel {
            get {
                return this.channelField;
            }
            set {
                this.channelField = value;
                this.RaisePropertyChanged("Channel");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChannelSpecified {
            get {
                return this.channelFieldSpecified;
            }
            set {
                this.channelFieldSpecified = value;
                this.RaisePropertyChanged("ChannelSpecified");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Control {
            get {
                return this.controlField;
            }
            set {
                this.controlField = value;
                this.RaisePropertyChanged("Control");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
                this.RaisePropertyChanged("Value");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.midi.org/MIDIEvents10")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
    public partial class ProgramChange : object, System.ComponentModel.INotifyPropertyChanged {
        
        private Channel channelField;
        
        private bool channelFieldSpecified;
        
        private string numberField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public Channel Channel {
            get {
                return this.channelField;
            }
            set {
                this.channelField = value;
                this.RaisePropertyChanged("Channel");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChannelSpecified {
            get {
                return this.channelFieldSpecified;
            }
            set {
                this.channelFieldSpecified = value;
                this.RaisePropertyChanged("ChannelSpecified");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Number {
            get {
                return this.numberField;
            }
            set {
                this.numberField = value;
                this.RaisePropertyChanged("Number");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.midi.org/MIDIEvents10")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
    public partial class ChannelKeyPressure : object, System.ComponentModel.INotifyPropertyChanged {
        
        private Channel channelField;
        
        private bool channelFieldSpecified;
        
        private string pressureField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public Channel Channel {
            get {
                return this.channelField;
            }
            set {
                this.channelField = value;
                this.RaisePropertyChanged("Channel");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChannelSpecified {
            get {
                return this.channelFieldSpecified;
            }
            set {
                this.channelFieldSpecified = value;
                this.RaisePropertyChanged("ChannelSpecified");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Pressure {
            get {
                return this.pressureField;
            }
            set {
                this.pressureField = value;
                this.RaisePropertyChanged("Pressure");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.midi.org/MIDIEvents10")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
    public partial class PitchBendChange : object, System.ComponentModel.INotifyPropertyChanged {
        
        private Channel channelField;
        
        private bool channelFieldSpecified;
        
        private string valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public Channel Channel {
            get {
                return this.channelField;
            }
            set {
                this.channelField = value;
                this.RaisePropertyChanged("Channel");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChannelSpecified {
            get {
                return this.channelFieldSpecified;
            }
            set {
                this.channelFieldSpecified = value;
                this.RaisePropertyChanged("ChannelSpecified");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
                this.RaisePropertyChanged("Value");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.midi.org/MIDIEvents10")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
    public partial class AllSoundOff : object, System.ComponentModel.INotifyPropertyChanged {
        
        private Channel channelField;
        
        private bool channelFieldSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public Channel Channel {
            get {
                return this.channelField;
            }
            set {
                this.channelField = value;
                this.RaisePropertyChanged("Channel");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChannelSpecified {
            get {
                return this.channelFieldSpecified;
            }
            set {
                this.channelFieldSpecified = value;
                this.RaisePropertyChanged("ChannelSpecified");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.midi.org/MIDIEvents10")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
    public partial class ResetAllControllers : object, System.ComponentModel.INotifyPropertyChanged {
        
        private Channel channelField;
        
        private bool channelFieldSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public Channel Channel {
            get {
                return this.channelField;
            }
            set {
                this.channelField = value;
                this.RaisePropertyChanged("Channel");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChannelSpecified {
            get {
                return this.channelFieldSpecified;
            }
            set {
                this.channelFieldSpecified = value;
                this.RaisePropertyChanged("ChannelSpecified");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.midi.org/MIDIEvents10")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
    public partial class LocalControl : object, System.ComponentModel.INotifyPropertyChanged {
        
        private Channel channelField;
        
        private bool channelFieldSpecified;
        
        private LocalControlValue valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public Channel Channel {
            get {
                return this.channelField;
            }
            set {
                this.channelField = value;
                this.RaisePropertyChanged("Channel");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChannelSpecified {
            get {
                return this.channelFieldSpecified;
            }
            set {
                this.channelFieldSpecified = value;
                this.RaisePropertyChanged("ChannelSpecified");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public LocalControlValue Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
                this.RaisePropertyChanged("Value");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.midi.org/MIDIEvents10")]
    public enum LocalControlValue {
        
        /// <remarks/>
        off,
        
        /// <remarks/>
        on,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.midi.org/MIDIEvents10")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
    public partial class AllNotesOff : object, System.ComponentModel.INotifyPropertyChanged {
        
        private Channel channelField;
        
        private bool channelFieldSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public Channel Channel {
            get {
                return this.channelField;
            }
            set {
                this.channelField = value;
                this.RaisePropertyChanged("Channel");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChannelSpecified {
            get {
                return this.channelFieldSpecified;
            }
            set {
                this.channelFieldSpecified = value;
                this.RaisePropertyChanged("ChannelSpecified");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.midi.org/MIDIEvents10")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
    public partial class OmniOff : object, System.ComponentModel.INotifyPropertyChanged {
        
        private Channel channelField;
        
        private bool channelFieldSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public Channel Channel {
            get {
                return this.channelField;
            }
            set {
                this.channelField = value;
                this.RaisePropertyChanged("Channel");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChannelSpecified {
            get {
                return this.channelFieldSpecified;
            }
            set {
                this.channelFieldSpecified = value;
                this.RaisePropertyChanged("ChannelSpecified");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.midi.org/MIDIEvents10")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
    public partial class OmniOn : object, System.ComponentModel.INotifyPropertyChanged {
        
        private Channel channelField;
        
        private bool channelFieldSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public Channel Channel {
            get {
                return this.channelField;
            }
            set {
                this.channelField = value;
                this.RaisePropertyChanged("Channel");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChannelSpecified {
            get {
                return this.channelFieldSpecified;
            }
            set {
                this.channelFieldSpecified = value;
                this.RaisePropertyChanged("ChannelSpecified");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.midi.org/MIDIEvents10")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
    public partial class MonoMode : object, System.ComponentModel.INotifyPropertyChanged {
        
        private Channel channelField;
        
        private bool channelFieldSpecified;
        
        private string valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public Channel Channel {
            get {
                return this.channelField;
            }
            set {
                this.channelField = value;
                this.RaisePropertyChanged("Channel");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChannelSpecified {
            get {
                return this.channelFieldSpecified;
            }
            set {
                this.channelFieldSpecified = value;
                this.RaisePropertyChanged("ChannelSpecified");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
                this.RaisePropertyChanged("Value");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.midi.org/MIDIEvents10")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
    public partial class PolyMode : object, System.ComponentModel.INotifyPropertyChanged {
        
        private Channel channelField;
        
        private bool channelFieldSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public Channel Channel {
            get {
                return this.channelField;
            }
            set {
                this.channelField = value;
                this.RaisePropertyChanged("Channel");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChannelSpecified {
            get {
                return this.channelFieldSpecified;
            }
            set {
                this.channelFieldSpecified = value;
                this.RaisePropertyChanged("ChannelSpecified");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.midi.org/MIDIEvents10")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
    public partial class ControlChange14 : object, System.ComponentModel.INotifyPropertyChanged {
        
        private Channel channelField;
        
        private bool channelFieldSpecified;
        
        private string controlField;
        
        private string valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public Channel Channel {
            get {
                return this.channelField;
            }
            set {
                this.channelField = value;
                this.RaisePropertyChanged("Channel");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChannelSpecified {
            get {
                return this.channelFieldSpecified;
            }
            set {
                this.channelFieldSpecified = value;
                this.RaisePropertyChanged("ChannelSpecified");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Control {
            get {
                return this.controlField;
            }
            set {
                this.controlField = value;
                this.RaisePropertyChanged("Control");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
                this.RaisePropertyChanged("Value");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.midi.org/MIDIEvents10")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
    public partial class RPNChange : object, System.ComponentModel.INotifyPropertyChanged {
        
        private Channel channelField;
        
        private bool channelFieldSpecified;
        
        private string rPNField;
        
        private string valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public Channel Channel {
            get {
                return this.channelField;
            }
            set {
                this.channelField = value;
                this.RaisePropertyChanged("Channel");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChannelSpecified {
            get {
                return this.channelFieldSpecified;
            }
            set {
                this.channelFieldSpecified = value;
                this.RaisePropertyChanged("ChannelSpecified");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string RPN {
            get {
                return this.rPNField;
            }
            set {
                this.rPNField = value;
                this.RaisePropertyChanged("RPN");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
                this.RaisePropertyChanged("Value");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.midi.org/MIDIEvents10")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
    public partial class NRPNChange : object, System.ComponentModel.INotifyPropertyChanged {
        
        private Channel channelField;
        
        private bool channelFieldSpecified;
        
        private string nRPNField;
        
        private string valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public Channel Channel {
            get {
                return this.channelField;
            }
            set {
                this.channelField = value;
                this.RaisePropertyChanged("Channel");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChannelSpecified {
            get {
                return this.channelFieldSpecified;
            }
            set {
                this.channelFieldSpecified = value;
                this.RaisePropertyChanged("ChannelSpecified");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string NRPN {
            get {
                return this.nRPNField;
            }
            set {
                this.nRPNField = value;
                this.RaisePropertyChanged("NRPN");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
                this.RaisePropertyChanged("Value");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.midi.org/MIDIEvents10")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
    public partial class SysEx : object, System.ComponentModel.INotifyPropertyChanged {
        
        private object[] itemsField;
        
        private string[] textField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("SysExChannel", typeof(SysExChannel), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("SysExDeviceID", typeof(SysExDeviceID), Order=0)]
        public object[] Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
                this.RaisePropertyChanged("Items");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string[] Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
                this.RaisePropertyChanged("Text");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.midi.org/MIDIEvents10")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
    public partial class SysExChannel : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string multiplierField;
        
        private string offsetField;
        
        public SysExChannel() {
            this.multiplierField = "1";
            this.offsetField = "0";
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="NMTOKEN")]
        [System.ComponentModel.DefaultValueAttribute("1")]
        public string Multiplier {
            get {
                return this.multiplierField;
            }
            set {
                this.multiplierField = value;
                this.RaisePropertyChanged("Multiplier");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="NMTOKEN")]
        [System.ComponentModel.DefaultValueAttribute("0")]
        public string Offset {
            get {
                return this.offsetField;
            }
            set {
                this.offsetField = value;
                this.RaisePropertyChanged("Offset");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.midi.org/MIDIEvents10")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
    public partial class SysExDeviceID : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string multiplierField;
        
        private string offsetField;
        
        public SysExDeviceID() {
            this.multiplierField = "1";
            this.offsetField = "0";
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="NMTOKEN")]
        [System.ComponentModel.DefaultValueAttribute("1")]
        public string Multiplier {
            get {
                return this.multiplierField;
            }
            set {
                this.multiplierField = value;
                this.RaisePropertyChanged("Multiplier");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="NMTOKEN")]
        [System.ComponentModel.DefaultValueAttribute("0")]
        public string Offset {
            get {
                return this.offsetField;
            }
            set {
                this.offsetField = value;
                this.RaisePropertyChanged("Offset");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.midi.org/MIDIEvents10")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
    public partial class MTCQuarterFrame : object, System.ComponentModel.INotifyPropertyChanged {
        
        private MTCQuarterFrameMessageType messageTypeField;
        
        private string dataNibbleField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public MTCQuarterFrameMessageType MessageType {
            get {
                return this.messageTypeField;
            }
            set {
                this.messageTypeField = value;
                this.RaisePropertyChanged("MessageType");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="NMTOKEN")]
        public string DataNibble {
            get {
                return this.dataNibbleField;
            }
            set {
                this.dataNibbleField = value;
                this.RaisePropertyChanged("DataNibble");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.midi.org/MIDIEvents10")]
    public enum MTCQuarterFrameMessageType {
        
        /// <remarks/>
        FrameLSNibble,
        
        /// <remarks/>
        FrameMSNibble,
        
        /// <remarks/>
        SecsLSNibble,
        
        /// <remarks/>
        SecsMSNibble,
        
        /// <remarks/>
        MinsLSNibble,
        
        /// <remarks/>
        MinsMSNibble,
        
        /// <remarks/>
        HrsLSNibble,
        
        /// <remarks/>
        HrsMSNibbleSMPTEType,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.midi.org/MIDIEvents10")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
    public partial class SongPositionPointer : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string positionField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Position {
            get {
                return this.positionField;
            }
            set {
                this.positionField = value;
                this.RaisePropertyChanged("Position");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.midi.org/MIDIEvents10")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
    public partial class SongSelect : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string numberField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Number {
            get {
                return this.numberField;
            }
            set {
                this.numberField = value;
                this.RaisePropertyChanged("Number");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.midi.org/MIDIEvents10")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
    public partial class TuneRequest : object, System.ComponentModel.INotifyPropertyChanged {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.midi.org/MIDIEvents10")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
    public partial class TimingClock : object, System.ComponentModel.INotifyPropertyChanged {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.midi.org/MIDIEvents10")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
    public partial class Start : object, System.ComponentModel.INotifyPropertyChanged {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.midi.org/MIDIEvents10")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
    public partial class Continue : object, System.ComponentModel.INotifyPropertyChanged {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.midi.org/MIDIEvents10")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
    public partial class Stop : object, System.ComponentModel.INotifyPropertyChanged {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.midi.org/MIDIEvents10")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
    public partial class ActiveSensing : object, System.ComponentModel.INotifyPropertyChanged {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.midi.org/MIDIEvents10")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
    public partial class SystemReset : object, System.ComponentModel.INotifyPropertyChanged {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.midi.org/MIDIDeviceTypes10")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.midi.org/MIDIDeviceTypes10", IsNullable=false)]
    public partial class MIDIDeviceTypes : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string authorField;
        
        private MIDIDeviceType[] mIDIDeviceTypeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Author {
            get {
                return this.authorField;
            }
            set {
                this.authorField = value;
                this.RaisePropertyChanged("Author");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("MIDIDeviceType", Order=1)]
        public MIDIDeviceType[] MIDIDeviceType {
            get {
                return this.mIDIDeviceTypeField;
            }
            set {
                this.mIDIDeviceTypeField = value;
                this.RaisePropertyChanged("MIDIDeviceType");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.midi.org/MIDIDeviceTypes10")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.midi.org/MIDIDeviceTypes10", IsNullable=false)]
    public partial class MIDIDeviceType : object, System.ComponentModel.INotifyPropertyChanged {
        
        private InquiryResponse inquiryResponseField;
        
        private DeviceID deviceIDField;
        
        private MIDIPortGroup[] mIDIPortGroupField;
        
        private Receives receivesField;
        
        private Transmits transmitsField;
        
        private string manufacturerField;
        
        private string modelField;
        
        private string imageField;
        
        private bool supportsGeneralMIDIField;
        
        private bool supportsGeneralMIDIFieldSpecified;
        
        private bool supportsMMCField;
        
        private bool supportsMMCFieldSpecified;
        
        private bool canRouteField;
        
        private bool canRouteFieldSpecified;
        
        private bool isSamplerField;
        
        private bool isSamplerFieldSpecified;
        
        private bool isDrumMachineField;
        
        private bool isDrumMachineFieldSpecified;
        
        private bool isMixerField;
        
        private bool isMixerFieldSpecified;
        
        private bool isEffectUnitField;
        
        private bool isEffectUnitFieldSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public InquiryResponse InquiryResponse {
            get {
                return this.inquiryResponseField;
            }
            set {
                this.inquiryResponseField = value;
                this.RaisePropertyChanged("InquiryResponse");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public DeviceID DeviceID {
            get {
                return this.deviceIDField;
            }
            set {
                this.deviceIDField = value;
                this.RaisePropertyChanged("DeviceID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("MIDIPortGroup", Order=2)]
        public MIDIPortGroup[] MIDIPortGroup {
            get {
                return this.mIDIPortGroupField;
            }
            set {
                this.mIDIPortGroupField = value;
                this.RaisePropertyChanged("MIDIPortGroup");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public Receives Receives {
            get {
                return this.receivesField;
            }
            set {
                this.receivesField = value;
                this.RaisePropertyChanged("Receives");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public Transmits Transmits {
            get {
                return this.transmitsField;
            }
            set {
                this.transmitsField = value;
                this.RaisePropertyChanged("Transmits");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Manufacturer {
            get {
                return this.manufacturerField;
            }
            set {
                this.manufacturerField = value;
                this.RaisePropertyChanged("Manufacturer");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Model {
            get {
                return this.modelField;
            }
            set {
                this.modelField = value;
                this.RaisePropertyChanged("Model");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Image {
            get {
                return this.imageField;
            }
            set {
                this.imageField = value;
                this.RaisePropertyChanged("Image");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool SupportsGeneralMIDI {
            get {
                return this.supportsGeneralMIDIField;
            }
            set {
                this.supportsGeneralMIDIField = value;
                this.RaisePropertyChanged("SupportsGeneralMIDI");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SupportsGeneralMIDISpecified {
            get {
                return this.supportsGeneralMIDIFieldSpecified;
            }
            set {
                this.supportsGeneralMIDIFieldSpecified = value;
                this.RaisePropertyChanged("SupportsGeneralMIDISpecified");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool SupportsMMC {
            get {
                return this.supportsMMCField;
            }
            set {
                this.supportsMMCField = value;
                this.RaisePropertyChanged("SupportsMMC");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SupportsMMCSpecified {
            get {
                return this.supportsMMCFieldSpecified;
            }
            set {
                this.supportsMMCFieldSpecified = value;
                this.RaisePropertyChanged("SupportsMMCSpecified");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool CanRoute {
            get {
                return this.canRouteField;
            }
            set {
                this.canRouteField = value;
                this.RaisePropertyChanged("CanRoute");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CanRouteSpecified {
            get {
                return this.canRouteFieldSpecified;
            }
            set {
                this.canRouteFieldSpecified = value;
                this.RaisePropertyChanged("CanRouteSpecified");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool IsSampler {
            get {
                return this.isSamplerField;
            }
            set {
                this.isSamplerField = value;
                this.RaisePropertyChanged("IsSampler");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsSamplerSpecified {
            get {
                return this.isSamplerFieldSpecified;
            }
            set {
                this.isSamplerFieldSpecified = value;
                this.RaisePropertyChanged("IsSamplerSpecified");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool IsDrumMachine {
            get {
                return this.isDrumMachineField;
            }
            set {
                this.isDrumMachineField = value;
                this.RaisePropertyChanged("IsDrumMachine");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsDrumMachineSpecified {
            get {
                return this.isDrumMachineFieldSpecified;
            }
            set {
                this.isDrumMachineFieldSpecified = value;
                this.RaisePropertyChanged("IsDrumMachineSpecified");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool IsMixer {
            get {
                return this.isMixerField;
            }
            set {
                this.isMixerField = value;
                this.RaisePropertyChanged("IsMixer");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsMixerSpecified {
            get {
                return this.isMixerFieldSpecified;
            }
            set {
                this.isMixerFieldSpecified = value;
                this.RaisePropertyChanged("IsMixerSpecified");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool IsEffectUnit {
            get {
                return this.isEffectUnitField;
            }
            set {
                this.isEffectUnitField = value;
                this.RaisePropertyChanged("IsEffectUnit");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsEffectUnitSpecified {
            get {
                return this.isEffectUnitFieldSpecified;
            }
            set {
                this.isEffectUnitFieldSpecified = value;
                this.RaisePropertyChanged("IsEffectUnitSpecified");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.midi.org/MIDIDeviceTypes10")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.midi.org/MIDIDeviceTypes10", IsNullable=false)]
    public partial class InquiryResponse : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string manufacturerField;
        
        private string familyField;
        
        private string memberField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Manufacturer {
            get {
                return this.manufacturerField;
            }
            set {
                this.manufacturerField = value;
                this.RaisePropertyChanged("Manufacturer");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Family {
            get {
                return this.familyField;
            }
            set {
                this.familyField = value;
                this.RaisePropertyChanged("Family");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Member {
            get {
                return this.memberField;
            }
            set {
                this.memberField = value;
                this.RaisePropertyChanged("Member");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.midi.org/MIDIDeviceTypes10")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.midi.org/MIDIDeviceTypes10", IsNullable=false)]
    public partial class DeviceID : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string minField;
        
        private string maxField;
        
        private string defaultField;
        
        private string baseField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="NMTOKEN")]
        public string Min {
            get {
                return this.minField;
            }
            set {
                this.minField = value;
                this.RaisePropertyChanged("Min");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="NMTOKEN")]
        public string Max {
            get {
                return this.maxField;
            }
            set {
                this.maxField = value;
                this.RaisePropertyChanged("Max");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="NMTOKEN")]
        public string Default {
            get {
                return this.defaultField;
            }
            set {
                this.defaultField = value;
                this.RaisePropertyChanged("Default");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="NMTOKEN")]
        public string Base {
            get {
                return this.baseField;
            }
            set {
                this.baseField = value;
                this.RaisePropertyChanged("Base");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.midi.org/MIDIDeviceTypes10")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.midi.org/MIDIDeviceTypes10", IsNullable=false)]
    public partial class MIDIPortGroup : object, System.ComponentModel.INotifyPropertyChanged {
        
        private object[] itemsField;
        
        private string nameField;
        
        public MIDIPortGroup() {
            this.nameField = "";
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("MIDIIn", typeof(MIDIIn), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("MIDIOut", typeof(MIDIOut), Order=0)]
        public object[] Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
                this.RaisePropertyChanged("Items");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute("")]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.midi.org/MIDIDeviceTypes10")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.midi.org/MIDIDeviceTypes10", IsNullable=false)]
    public partial class MIDIIn : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string nameField;
        
        private string numberOfThrusField;
        
        public MIDIIn() {
            this.nameField = "";
            this.numberOfThrusField = "0";
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute("")]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="NMTOKEN")]
        [System.ComponentModel.DefaultValueAttribute("0")]
        public string NumberOfThrus {
            get {
                return this.numberOfThrusField;
            }
            set {
                this.numberOfThrusField = value;
                this.RaisePropertyChanged("NumberOfThrus");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.midi.org/MIDIDeviceTypes10")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.midi.org/MIDIDeviceTypes10", IsNullable=false)]
    public partial class MIDIOut : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string nameField;
        
        public MIDIOut() {
            this.nameField = "";
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute("")]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.midi.org/MIDIDeviceTypes10")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.midi.org/MIDIDeviceTypes10", IsNullable=false)]
    public partial class Receives : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string maxChannelsField;
        
        private bool mTCField;
        
        private bool mTCFieldSpecified;
        
        private bool clockField;
        
        private bool clockFieldSpecified;
        
        private bool notesField;
        
        private bool notesFieldSpecified;
        
        private bool programChangesField;
        
        private bool programChangesFieldSpecified;
        
        private bool bankSelectMSBField;
        
        private bool bankSelectMSBFieldSpecified;
        
        private bool bankSelectLSBField;
        
        private bool bankSelectLSBFieldSpecified;
        
        private bool panDisruptsStereoField;
        
        private bool panDisruptsStereoFieldSpecified;
        
        public Receives() {
            this.maxChannelsField = "16";
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="NMTOKEN")]
        [System.ComponentModel.DefaultValueAttribute("16")]
        public string MaxChannels {
            get {
                return this.maxChannelsField;
            }
            set {
                this.maxChannelsField = value;
                this.RaisePropertyChanged("MaxChannels");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool MTC {
            get {
                return this.mTCField;
            }
            set {
                this.mTCField = value;
                this.RaisePropertyChanged("MTC");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MTCSpecified {
            get {
                return this.mTCFieldSpecified;
            }
            set {
                this.mTCFieldSpecified = value;
                this.RaisePropertyChanged("MTCSpecified");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool Clock {
            get {
                return this.clockField;
            }
            set {
                this.clockField = value;
                this.RaisePropertyChanged("Clock");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ClockSpecified {
            get {
                return this.clockFieldSpecified;
            }
            set {
                this.clockFieldSpecified = value;
                this.RaisePropertyChanged("ClockSpecified");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool Notes {
            get {
                return this.notesField;
            }
            set {
                this.notesField = value;
                this.RaisePropertyChanged("Notes");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NotesSpecified {
            get {
                return this.notesFieldSpecified;
            }
            set {
                this.notesFieldSpecified = value;
                this.RaisePropertyChanged("NotesSpecified");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool ProgramChanges {
            get {
                return this.programChangesField;
            }
            set {
                this.programChangesField = value;
                this.RaisePropertyChanged("ProgramChanges");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ProgramChangesSpecified {
            get {
                return this.programChangesFieldSpecified;
            }
            set {
                this.programChangesFieldSpecified = value;
                this.RaisePropertyChanged("ProgramChangesSpecified");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool BankSelectMSB {
            get {
                return this.bankSelectMSBField;
            }
            set {
                this.bankSelectMSBField = value;
                this.RaisePropertyChanged("BankSelectMSB");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BankSelectMSBSpecified {
            get {
                return this.bankSelectMSBFieldSpecified;
            }
            set {
                this.bankSelectMSBFieldSpecified = value;
                this.RaisePropertyChanged("BankSelectMSBSpecified");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool BankSelectLSB {
            get {
                return this.bankSelectLSBField;
            }
            set {
                this.bankSelectLSBField = value;
                this.RaisePropertyChanged("BankSelectLSB");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BankSelectLSBSpecified {
            get {
                return this.bankSelectLSBFieldSpecified;
            }
            set {
                this.bankSelectLSBFieldSpecified = value;
                this.RaisePropertyChanged("BankSelectLSBSpecified");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool PanDisruptsStereo {
            get {
                return this.panDisruptsStereoField;
            }
            set {
                this.panDisruptsStereoField = value;
                this.RaisePropertyChanged("PanDisruptsStereo");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PanDisruptsStereoSpecified {
            get {
                return this.panDisruptsStereoFieldSpecified;
            }
            set {
                this.panDisruptsStereoFieldSpecified = value;
                this.RaisePropertyChanged("PanDisruptsStereoSpecified");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.midi.org/MIDIDeviceTypes10")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.midi.org/MIDIDeviceTypes10", IsNullable=false)]
    public partial class Transmits : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string maxChannelsField;
        
        private bool mTCField;
        
        private bool mTCFieldSpecified;
        
        private bool clockField;
        
        private bool clockFieldSpecified;
        
        private bool notesField;
        
        private bool notesFieldSpecified;
        
        private bool programChangesField;
        
        private bool programChangesFieldSpecified;
        
        private bool bankSelectMSBField;
        
        private bool bankSelectMSBFieldSpecified;
        
        private bool bankSelectLSBField;
        
        private bool bankSelectLSBFieldSpecified;
        
        public Transmits() {
            this.maxChannelsField = "16";
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="NMTOKEN")]
        [System.ComponentModel.DefaultValueAttribute("16")]
        public string MaxChannels {
            get {
                return this.maxChannelsField;
            }
            set {
                this.maxChannelsField = value;
                this.RaisePropertyChanged("MaxChannels");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool MTC {
            get {
                return this.mTCField;
            }
            set {
                this.mTCField = value;
                this.RaisePropertyChanged("MTC");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MTCSpecified {
            get {
                return this.mTCFieldSpecified;
            }
            set {
                this.mTCFieldSpecified = value;
                this.RaisePropertyChanged("MTCSpecified");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool Clock {
            get {
                return this.clockField;
            }
            set {
                this.clockField = value;
                this.RaisePropertyChanged("Clock");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ClockSpecified {
            get {
                return this.clockFieldSpecified;
            }
            set {
                this.clockFieldSpecified = value;
                this.RaisePropertyChanged("ClockSpecified");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool Notes {
            get {
                return this.notesField;
            }
            set {
                this.notesField = value;
                this.RaisePropertyChanged("Notes");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NotesSpecified {
            get {
                return this.notesFieldSpecified;
            }
            set {
                this.notesFieldSpecified = value;
                this.RaisePropertyChanged("NotesSpecified");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool ProgramChanges {
            get {
                return this.programChangesField;
            }
            set {
                this.programChangesField = value;
                this.RaisePropertyChanged("ProgramChanges");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ProgramChangesSpecified {
            get {
                return this.programChangesFieldSpecified;
            }
            set {
                this.programChangesFieldSpecified = value;
                this.RaisePropertyChanged("ProgramChangesSpecified");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool BankSelectMSB {
            get {
                return this.bankSelectMSBField;
            }
            set {
                this.bankSelectMSBField = value;
                this.RaisePropertyChanged("BankSelectMSB");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BankSelectMSBSpecified {
            get {
                return this.bankSelectMSBFieldSpecified;
            }
            set {
                this.bankSelectMSBFieldSpecified = value;
                this.RaisePropertyChanged("BankSelectMSBSpecified");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool BankSelectLSB {
            get {
                return this.bankSelectLSBField;
            }
            set {
                this.bankSelectLSBField = value;
                this.RaisePropertyChanged("BankSelectLSB");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BankSelectLSBSpecified {
            get {
                return this.bankSelectLSBFieldSpecified;
            }
            set {
                this.bankSelectLSBFieldSpecified = value;
                this.RaisePropertyChanged("BankSelectLSBSpecified");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.midi.org/MIDINameDocument10")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.midi.org/MIDINameDocument10", IsNullable=false)]
    public partial class MIDINameDocument : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string authorField;
        
        private object[] itemsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Author {
            get {
                return this.authorField;
            }
            set {
                this.authorField = value;
                this.RaisePropertyChanged("Author");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ExtendingDeviceNames", typeof(ExtendingDeviceNames), Order=1)]
        [System.Xml.Serialization.XmlElementAttribute("MasterDeviceNames", typeof(MasterDeviceNames), Order=1)]
        [System.Xml.Serialization.XmlElementAttribute("StandardDeviceMode", typeof(StandardDeviceMode), Order=1)]
        public object[] Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
                this.RaisePropertyChanged("Items");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.midi.org/MIDINameDocument10")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.midi.org/MIDINameDocument10", IsNullable=false)]
    public partial class ExtendingDeviceNames : object, System.ComponentModel.INotifyPropertyChanged {
        
        private object[] itemsField;
        
        private ItemsChoiceType1[] itemsElementNameField;
        
        private object[] items1Field;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Device", typeof(Device), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("Manufacturer", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("Model", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemsElementName")]
        public object[] Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
                this.RaisePropertyChanged("Items");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ItemsElementName", Order=1)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemsChoiceType1[] ItemsElementName {
            get {
                return this.itemsElementNameField;
            }
            set {
                this.itemsElementNameField = value;
                this.RaisePropertyChanged("ItemsElementName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ControlNameList", typeof(ControlNameList), Order=2)]
        [System.Xml.Serialization.XmlElementAttribute("NoteNameList", typeof(NoteNameList), Order=2)]
        [System.Xml.Serialization.XmlElementAttribute("PatchNameList", typeof(PatchNameList), Order=2)]
        [System.Xml.Serialization.XmlElementAttribute("ValueNameList", typeof(ValueNameList), Order=2)]
        public object[] Items1 {
            get {
                return this.items1Field;
            }
            set {
                this.items1Field = value;
                this.RaisePropertyChanged("Items1");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.midi.org/MIDINameDocument10")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.midi.org/MIDINameDocument10", IsNullable=false)]
    public partial class Device : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string nameField;
        
        private string uniqueIDField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="NMTOKEN")]
        public string UniqueID {
            get {
                return this.uniqueIDField;
            }
            set {
                this.uniqueIDField = value;
                this.RaisePropertyChanged("UniqueID");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.midi.org/MIDINameDocument10", IncludeInSchema=false)]
    public enum ItemsChoiceType1 {
        
        /// <remarks/>
        Device,
        
        /// <remarks/>
        Manufacturer,
        
        /// <remarks/>
        Model,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.midi.org/MIDINameDocument10")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.midi.org/MIDINameDocument10", IsNullable=false)]
    public partial class ControlNameList : object, System.ComponentModel.INotifyPropertyChanged {
        
        private Control[] controlField;
        
        private string nameField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Control", Order=0)]
        public Control[] Control {
            get {
                return this.controlField;
            }
            set {
                this.controlField = value;
                this.RaisePropertyChanged("Control");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.midi.org/MIDINameDocument10")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.midi.org/MIDINameDocument10", IsNullable=false)]
    public partial class Control : object, System.ComponentModel.INotifyPropertyChanged {
        
        private Values valuesField;
        
        private ControlType typeField;
        
        private string numberField;
        
        private string nameField;
        
        public Control() {
            this.typeField = ControlType.Item7bit;
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Values Values {
            get {
                return this.valuesField;
            }
            set {
                this.valuesField = value;
                this.RaisePropertyChanged("Values");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(ControlType.Item7bit)]
        public ControlType Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
                this.RaisePropertyChanged("Type");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="NMTOKEN")]
        public string Number {
            get {
                return this.numberField;
            }
            set {
                this.numberField = value;
                this.RaisePropertyChanged("Number");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.midi.org/MIDINameDocument10")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.midi.org/MIDINameDocument10", IsNullable=false)]
    public partial class Values : object, System.ComponentModel.INotifyPropertyChanged {
        
        private object itemField;
        
        private string minField;
        
        private string maxField;
        
        private string defaultField;
        
        private string unitsField;
        
        private string mappingField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("UsesValueNameList", typeof(UsesValueNameList), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("ValueNameList", typeof(ValueNameList), Order=0)]
        public object Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
                this.RaisePropertyChanged("Item");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="NMTOKEN")]
        public string Min {
            get {
                return this.minField;
            }
            set {
                this.minField = value;
                this.RaisePropertyChanged("Min");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="NMTOKEN")]
        public string Max {
            get {
                return this.maxField;
            }
            set {
                this.maxField = value;
                this.RaisePropertyChanged("Max");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="NMTOKEN")]
        public string Default {
            get {
                return this.defaultField;
            }
            set {
                this.defaultField = value;
                this.RaisePropertyChanged("Default");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="NMTOKEN")]
        public string Units {
            get {
                return this.unitsField;
            }
            set {
                this.unitsField = value;
                this.RaisePropertyChanged("Units");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="NMTOKEN")]
        public string Mapping {
            get {
                return this.mappingField;
            }
            set {
                this.mappingField = value;
                this.RaisePropertyChanged("Mapping");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.midi.org/MIDINameDocument10")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.midi.org/MIDINameDocument10", IsNullable=false)]
    public partial class UsesValueNameList : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string nameField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.midi.org/MIDINameDocument10")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.midi.org/MIDINameDocument10", IsNullable=false)]
    public partial class ValueNameList : object, System.ComponentModel.INotifyPropertyChanged {
        
        private Value[] valueField;
        
        private string nameField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Value", Order=0)]
        public Value[] Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
                this.RaisePropertyChanged("Value");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.midi.org/MIDINameDocument10")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.midi.org/MIDINameDocument10", IsNullable=false)]
    public partial class Value : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string numberField;
        
        private string nameField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="NMTOKEN")]
        public string Number {
            get {
                return this.numberField;
            }
            set {
                this.numberField = value;
                this.RaisePropertyChanged("Number");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.midi.org/MIDINameDocument10")]
    public enum ControlType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7bit")]
        Item7bit,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("14bit")]
        Item14bit,
        
        /// <remarks/>
        RPN,
        
        /// <remarks/>
        NRPN,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.midi.org/MIDINameDocument10")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.midi.org/MIDINameDocument10", IsNullable=false)]
    public partial class NoteNameList : object, System.ComponentModel.INotifyPropertyChanged {
        
        private object[] itemsField;
        
        private string nameField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Note", typeof(Note), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("NoteGroup", typeof(NoteGroup), Order=0)]
        public object[] Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
                this.RaisePropertyChanged("Items");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.midi.org/MIDINameDocument10")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.midi.org/MIDINameDocument10", IsNullable=false)]
    public partial class Note : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string numberField;
        
        private string nameField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="NMTOKEN")]
        public string Number {
            get {
                return this.numberField;
            }
            set {
                this.numberField = value;
                this.RaisePropertyChanged("Number");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.midi.org/MIDINameDocument10")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.midi.org/MIDINameDocument10", IsNullable=false)]
    public partial class NoteGroup : object, System.ComponentModel.INotifyPropertyChanged {
        
        private Note[] noteField;
        
        private string nameField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Note", Order=0)]
        public Note[] Note {
            get {
                return this.noteField;
            }
            set {
                this.noteField = value;
                this.RaisePropertyChanged("Note");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.midi.org/MIDINameDocument10")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.midi.org/MIDINameDocument10", IsNullable=false)]
    public partial class PatchNameList : object, System.ComponentModel.INotifyPropertyChanged {
        
        private Patch[] patchField;
        
        private string nameField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Patch", Order=0)]
        public Patch[] Patch {
            get {
                return this.patchField;
            }
            set {
                this.patchField = value;
                this.RaisePropertyChanged("Patch");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.midi.org/MIDINameDocument10")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.midi.org/MIDINameDocument10", IsNullable=false)]
    public partial class Patch : object, System.ComponentModel.INotifyPropertyChanged {
        
        private object[] patchMIDICommandsField;
        
        private ChannelNameSetAssign[] channelNameSetAssignmentsField;
        
        private object itemField;
        
        private object item1Field;
        
        private string numberField;
        
        private string nameField;
        
        private string programChangeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        [System.Xml.Serialization.XmlArrayItemAttribute("AllNotesOff", typeof(AllNotesOff), Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
        [System.Xml.Serialization.XmlArrayItemAttribute("AllSoundOff", typeof(AllSoundOff), Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
        [System.Xml.Serialization.XmlArrayItemAttribute("ChannelKeyPressure", typeof(ChannelKeyPressure), Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
        [System.Xml.Serialization.XmlArrayItemAttribute("ControlChange", typeof(ControlChange), Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
        [System.Xml.Serialization.XmlArrayItemAttribute("LocalControl", typeof(LocalControl), Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
        [System.Xml.Serialization.XmlArrayItemAttribute("MonoMode", typeof(MonoMode), Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
        [System.Xml.Serialization.XmlArrayItemAttribute("NoteOff", typeof(NoteOff), Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
        [System.Xml.Serialization.XmlArrayItemAttribute("NoteOn", typeof(NoteOn), Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
        [System.Xml.Serialization.XmlArrayItemAttribute("OmniOff", typeof(OmniOff), Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
        [System.Xml.Serialization.XmlArrayItemAttribute("OmniOn", typeof(OmniOn), Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
        [System.Xml.Serialization.XmlArrayItemAttribute("PitchBendChange", typeof(PitchBendChange), Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
        [System.Xml.Serialization.XmlArrayItemAttribute("PolyKeyPressure", typeof(PolyKeyPressure), Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
        [System.Xml.Serialization.XmlArrayItemAttribute("PolyMode", typeof(PolyMode), Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
        [System.Xml.Serialization.XmlArrayItemAttribute("ProgramChange", typeof(ProgramChange), Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
        [System.Xml.Serialization.XmlArrayItemAttribute("ResetAllControllers", typeof(ResetAllControllers), Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
        [System.Xml.Serialization.XmlArrayItemAttribute("MIDIDelay", typeof(MIDIDelay), IsNullable=false)]
        public object[] PatchMIDICommands {
            get {
                return this.patchMIDICommandsField;
            }
            set {
                this.patchMIDICommandsField = value;
                this.RaisePropertyChanged("PatchMIDICommands");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=1)]
        [System.Xml.Serialization.XmlArrayItemAttribute("ChannelNameSetAssign", IsNullable=false)]
        public ChannelNameSetAssign[] ChannelNameSetAssignments {
            get {
                return this.channelNameSetAssignmentsField;
            }
            set {
                this.channelNameSetAssignmentsField = value;
                this.RaisePropertyChanged("ChannelNameSetAssignments");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("NoteNameList", typeof(NoteNameList), Order=2)]
        [System.Xml.Serialization.XmlElementAttribute("UsesNoteNameList", typeof(UsesNoteNameList), Order=2)]
        public object Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
                this.RaisePropertyChanged("Item");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ControlNameList", typeof(ControlNameList), Order=3)]
        [System.Xml.Serialization.XmlElementAttribute("UsesControlNameList", typeof(UsesControlNameList), Order=3)]
        public object Item1 {
            get {
                return this.item1Field;
            }
            set {
                this.item1Field = value;
                this.RaisePropertyChanged("Item1");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Number {
            get {
                return this.numberField;
            }
            set {
                this.numberField = value;
                this.RaisePropertyChanged("Number");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="NMTOKEN")]
        public string ProgramChange {
            get {
                return this.programChangeField;
            }
            set {
                this.programChangeField = value;
                this.RaisePropertyChanged("ProgramChange");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.midi.org/MIDINameDocument10")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.midi.org/MIDINameDocument10", IsNullable=false)]
    public partial class MIDIDelay : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string millisecondsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Milliseconds {
            get {
                return this.millisecondsField;
            }
            set {
                this.millisecondsField = value;
                this.RaisePropertyChanged("Milliseconds");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.midi.org/MIDINameDocument10")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.midi.org/MIDINameDocument10", IsNullable=false)]
    public partial class ChannelNameSetAssign : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string channelField;
        
        private string nameSetField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="NMTOKEN")]
        public string Channel {
            get {
                return this.channelField;
            }
            set {
                this.channelField = value;
                this.RaisePropertyChanged("Channel");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string NameSet {
            get {
                return this.nameSetField;
            }
            set {
                this.nameSetField = value;
                this.RaisePropertyChanged("NameSet");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.midi.org/MIDINameDocument10")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.midi.org/MIDINameDocument10", IsNullable=false)]
    public partial class UsesNoteNameList : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string nameField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.midi.org/MIDINameDocument10")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.midi.org/MIDINameDocument10", IsNullable=false)]
    public partial class UsesControlNameList : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string nameField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.midi.org/MIDINameDocument10")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.midi.org/MIDINameDocument10", IsNullable=false)]
    public partial class MasterDeviceNames : object, System.ComponentModel.INotifyPropertyChanged {
        
        private object[] itemsField;
        
        private ItemsChoiceType[] itemsElementNameField;
        
        private object[] items1Field;
        
        private ChannelNameSet[] channelNameSetField;
        
        private object[] items2Field;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Device", typeof(Device), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("Manufacturer", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("Model", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemsElementName")]
        public object[] Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
                this.RaisePropertyChanged("Items");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ItemsElementName", Order=1)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemsChoiceType[] ItemsElementName {
            get {
                return this.itemsElementNameField;
            }
            set {
                this.itemsElementNameField = value;
                this.RaisePropertyChanged("ItemsElementName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("CustomDeviceMode", typeof(CustomDeviceMode), Order=2)]
        [System.Xml.Serialization.XmlElementAttribute("SupportsStandardDeviceMode", typeof(SupportsStandardDeviceMode), Order=2)]
        public object[] Items1 {
            get {
                return this.items1Field;
            }
            set {
                this.items1Field = value;
                this.RaisePropertyChanged("Items1");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ChannelNameSet", Order=3)]
        public ChannelNameSet[] ChannelNameSet {
            get {
                return this.channelNameSetField;
            }
            set {
                this.channelNameSetField = value;
                this.RaisePropertyChanged("ChannelNameSet");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ControlNameList", typeof(ControlNameList), Order=4)]
        [System.Xml.Serialization.XmlElementAttribute("NoteNameList", typeof(NoteNameList), Order=4)]
        [System.Xml.Serialization.XmlElementAttribute("PatchNameList", typeof(PatchNameList), Order=4)]
        [System.Xml.Serialization.XmlElementAttribute("ValueNameList", typeof(ValueNameList), Order=4)]
        public object[] Items2 {
            get {
                return this.items2Field;
            }
            set {
                this.items2Field = value;
                this.RaisePropertyChanged("Items2");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.midi.org/MIDINameDocument10", IncludeInSchema=false)]
    public enum ItemsChoiceType {
        
        /// <remarks/>
        Device,
        
        /// <remarks/>
        Manufacturer,
        
        /// <remarks/>
        Model,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.midi.org/MIDINameDocument10")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.midi.org/MIDINameDocument10", IsNullable=false)]
    public partial class CustomDeviceMode : object, System.ComponentModel.INotifyPropertyChanged {
        
        private DeviceModeEnable deviceModeEnableField;
        
        private DeviceModeDisable deviceModeDisableField;
        
        private ChannelNameSetAssign[] channelNameSetAssignmentsField;
        
        private object[] itemsField;
        
        private string nameField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public DeviceModeEnable DeviceModeEnable {
            get {
                return this.deviceModeEnableField;
            }
            set {
                this.deviceModeEnableField = value;
                this.RaisePropertyChanged("DeviceModeEnable");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public DeviceModeDisable DeviceModeDisable {
            get {
                return this.deviceModeDisableField;
            }
            set {
                this.deviceModeDisableField = value;
                this.RaisePropertyChanged("DeviceModeDisable");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=2)]
        [System.Xml.Serialization.XmlArrayItemAttribute("ChannelNameSetAssign", IsNullable=false)]
        public ChannelNameSetAssign[] ChannelNameSetAssignments {
            get {
                return this.channelNameSetAssignmentsField;
            }
            set {
                this.channelNameSetAssignmentsField = value;
                this.RaisePropertyChanged("ChannelNameSetAssignments");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ControlNameList", typeof(ControlNameList), Order=3)]
        [System.Xml.Serialization.XmlElementAttribute("NoteNameList", typeof(NoteNameList), Order=3)]
        [System.Xml.Serialization.XmlElementAttribute("PatchNameList", typeof(PatchNameList), Order=3)]
        [System.Xml.Serialization.XmlElementAttribute("ValueNameList", typeof(ValueNameList), Order=3)]
        public object[] Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
                this.RaisePropertyChanged("Items");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.midi.org/MIDINameDocument10")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.midi.org/MIDINameDocument10", IsNullable=false)]
    public partial class DeviceModeEnable : object, System.ComponentModel.INotifyPropertyChanged {
        
        private object[] mIDICommandsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        [System.Xml.Serialization.XmlArrayItemAttribute("AllNotesOff", typeof(AllNotesOff), Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
        [System.Xml.Serialization.XmlArrayItemAttribute("AllSoundOff", typeof(AllSoundOff), Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
        [System.Xml.Serialization.XmlArrayItemAttribute("ChannelKeyPressure", typeof(ChannelKeyPressure), Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
        [System.Xml.Serialization.XmlArrayItemAttribute("ControlChange", typeof(ControlChange), Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
        [System.Xml.Serialization.XmlArrayItemAttribute("LocalControl", typeof(LocalControl), Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
        [System.Xml.Serialization.XmlArrayItemAttribute("MonoMode", typeof(MonoMode), Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
        [System.Xml.Serialization.XmlArrayItemAttribute("NoteOff", typeof(NoteOff), Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
        [System.Xml.Serialization.XmlArrayItemAttribute("NoteOn", typeof(NoteOn), Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
        [System.Xml.Serialization.XmlArrayItemAttribute("OmniOff", typeof(OmniOff), Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
        [System.Xml.Serialization.XmlArrayItemAttribute("OmniOn", typeof(OmniOn), Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
        [System.Xml.Serialization.XmlArrayItemAttribute("PitchBendChange", typeof(PitchBendChange), Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
        [System.Xml.Serialization.XmlArrayItemAttribute("PolyKeyPressure", typeof(PolyKeyPressure), Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
        [System.Xml.Serialization.XmlArrayItemAttribute("PolyMode", typeof(PolyMode), Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
        [System.Xml.Serialization.XmlArrayItemAttribute("ProgramChange", typeof(ProgramChange), Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
        [System.Xml.Serialization.XmlArrayItemAttribute("ResetAllControllers", typeof(ResetAllControllers), Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
        [System.Xml.Serialization.XmlArrayItemAttribute("SysEx", typeof(SysEx), Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
        [System.Xml.Serialization.XmlArrayItemAttribute("MIDIDelay", typeof(MIDIDelay), IsNullable=false)]
        public object[] MIDICommands {
            get {
                return this.mIDICommandsField;
            }
            set {
                this.mIDICommandsField = value;
                this.RaisePropertyChanged("MIDICommands");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.midi.org/MIDINameDocument10")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.midi.org/MIDINameDocument10", IsNullable=false)]
    public partial class DeviceModeDisable : object, System.ComponentModel.INotifyPropertyChanged {
        
        private object[] mIDICommandsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        [System.Xml.Serialization.XmlArrayItemAttribute("AllNotesOff", typeof(AllNotesOff), Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
        [System.Xml.Serialization.XmlArrayItemAttribute("AllSoundOff", typeof(AllSoundOff), Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
        [System.Xml.Serialization.XmlArrayItemAttribute("ChannelKeyPressure", typeof(ChannelKeyPressure), Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
        [System.Xml.Serialization.XmlArrayItemAttribute("ControlChange", typeof(ControlChange), Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
        [System.Xml.Serialization.XmlArrayItemAttribute("LocalControl", typeof(LocalControl), Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
        [System.Xml.Serialization.XmlArrayItemAttribute("MonoMode", typeof(MonoMode), Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
        [System.Xml.Serialization.XmlArrayItemAttribute("NoteOff", typeof(NoteOff), Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
        [System.Xml.Serialization.XmlArrayItemAttribute("NoteOn", typeof(NoteOn), Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
        [System.Xml.Serialization.XmlArrayItemAttribute("OmniOff", typeof(OmniOff), Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
        [System.Xml.Serialization.XmlArrayItemAttribute("OmniOn", typeof(OmniOn), Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
        [System.Xml.Serialization.XmlArrayItemAttribute("PitchBendChange", typeof(PitchBendChange), Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
        [System.Xml.Serialization.XmlArrayItemAttribute("PolyKeyPressure", typeof(PolyKeyPressure), Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
        [System.Xml.Serialization.XmlArrayItemAttribute("PolyMode", typeof(PolyMode), Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
        [System.Xml.Serialization.XmlArrayItemAttribute("ProgramChange", typeof(ProgramChange), Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
        [System.Xml.Serialization.XmlArrayItemAttribute("ResetAllControllers", typeof(ResetAllControllers), Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
        [System.Xml.Serialization.XmlArrayItemAttribute("SysEx", typeof(SysEx), Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
        [System.Xml.Serialization.XmlArrayItemAttribute("MIDIDelay", typeof(MIDIDelay), IsNullable=false)]
        public object[] MIDICommands {
            get {
                return this.mIDICommandsField;
            }
            set {
                this.mIDICommandsField = value;
                this.RaisePropertyChanged("MIDICommands");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.midi.org/MIDINameDocument10")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.midi.org/MIDINameDocument10", IsNullable=false)]
    public partial class SupportsStandardDeviceMode : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string nameField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.midi.org/MIDINameDocument10")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.midi.org/MIDINameDocument10", IsNullable=false)]
    public partial class ChannelNameSet : object, System.ComponentModel.INotifyPropertyChanged {
        
        private AvailableChannel[] availableForChannelsField;
        
        private object itemField;
        
        private object item1Field;
        
        private PatchBank[] patchBankField;
        
        private string nameField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        [System.Xml.Serialization.XmlArrayItemAttribute("AvailableChannel", IsNullable=false)]
        public AvailableChannel[] AvailableForChannels {
            get {
                return this.availableForChannelsField;
            }
            set {
                this.availableForChannelsField = value;
                this.RaisePropertyChanged("AvailableForChannels");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("NoteNameList", typeof(NoteNameList), Order=1)]
        [System.Xml.Serialization.XmlElementAttribute("UsesNoteNameList", typeof(UsesNoteNameList), Order=1)]
        public object Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
                this.RaisePropertyChanged("Item");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ControlNameList", typeof(ControlNameList), Order=2)]
        [System.Xml.Serialization.XmlElementAttribute("UsesControlNameList", typeof(UsesControlNameList), Order=2)]
        public object Item1 {
            get {
                return this.item1Field;
            }
            set {
                this.item1Field = value;
                this.RaisePropertyChanged("Item1");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("PatchBank", Order=3)]
        public PatchBank[] PatchBank {
            get {
                return this.patchBankField;
            }
            set {
                this.patchBankField = value;
                this.RaisePropertyChanged("PatchBank");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.midi.org/MIDINameDocument10")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.midi.org/MIDINameDocument10", IsNullable=false)]
    public partial class AvailableChannel : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string channelField;
        
        private bool availableField;
        
        public AvailableChannel() {
            this.availableField = true;
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="NMTOKEN")]
        public string Channel {
            get {
                return this.channelField;
            }
            set {
                this.channelField = value;
                this.RaisePropertyChanged("Channel");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool Available {
            get {
                return this.availableField;
            }
            set {
                this.availableField = value;
                this.RaisePropertyChanged("Available");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.midi.org/MIDINameDocument10")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.midi.org/MIDINameDocument10", IsNullable=false)]
    public partial class PatchBank : object, System.ComponentModel.INotifyPropertyChanged {
        
        private object[] mIDICommandsField;
        
        private object itemField;
        
        private string nameField;
        
        private bool rOMField;
        
        public PatchBank() {
            this.rOMField = false;
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        [System.Xml.Serialization.XmlArrayItemAttribute("AllNotesOff", typeof(AllNotesOff), Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
        [System.Xml.Serialization.XmlArrayItemAttribute("AllSoundOff", typeof(AllSoundOff), Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
        [System.Xml.Serialization.XmlArrayItemAttribute("ChannelKeyPressure", typeof(ChannelKeyPressure), Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
        [System.Xml.Serialization.XmlArrayItemAttribute("ControlChange", typeof(ControlChange), Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
        [System.Xml.Serialization.XmlArrayItemAttribute("LocalControl", typeof(LocalControl), Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
        [System.Xml.Serialization.XmlArrayItemAttribute("MonoMode", typeof(MonoMode), Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
        [System.Xml.Serialization.XmlArrayItemAttribute("NoteOff", typeof(NoteOff), Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
        [System.Xml.Serialization.XmlArrayItemAttribute("NoteOn", typeof(NoteOn), Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
        [System.Xml.Serialization.XmlArrayItemAttribute("OmniOff", typeof(OmniOff), Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
        [System.Xml.Serialization.XmlArrayItemAttribute("OmniOn", typeof(OmniOn), Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
        [System.Xml.Serialization.XmlArrayItemAttribute("PitchBendChange", typeof(PitchBendChange), Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
        [System.Xml.Serialization.XmlArrayItemAttribute("PolyKeyPressure", typeof(PolyKeyPressure), Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
        [System.Xml.Serialization.XmlArrayItemAttribute("PolyMode", typeof(PolyMode), Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
        [System.Xml.Serialization.XmlArrayItemAttribute("ProgramChange", typeof(ProgramChange), Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
        [System.Xml.Serialization.XmlArrayItemAttribute("ResetAllControllers", typeof(ResetAllControllers), Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
        [System.Xml.Serialization.XmlArrayItemAttribute("SysEx", typeof(SysEx), Namespace="http://schemas.midi.org/MIDIEvents10", IsNullable=false)]
        [System.Xml.Serialization.XmlArrayItemAttribute("MIDIDelay", typeof(MIDIDelay), IsNullable=false)]
        public object[] MIDICommands {
            get {
                return this.mIDICommandsField;
            }
            set {
                this.mIDICommandsField = value;
                this.RaisePropertyChanged("MIDICommands");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("PatchNameList", typeof(PatchNameList), Order=1)]
        [System.Xml.Serialization.XmlElementAttribute("UsesPatchNameList", typeof(UsesPatchNameList), Order=1)]
        public object Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
                this.RaisePropertyChanged("Item");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool ROM {
            get {
                return this.rOMField;
            }
            set {
                this.rOMField = value;
                this.RaisePropertyChanged("ROM");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.midi.org/MIDINameDocument10")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.midi.org/MIDINameDocument10", IsNullable=false)]
    public partial class UsesPatchNameList : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string nameField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.midi.org/MIDINameDocument10")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.midi.org/MIDINameDocument10", IsNullable=false)]
    public partial class StandardDeviceMode : object, System.ComponentModel.INotifyPropertyChanged {
        
        private DeviceModeEnable deviceModeEnableField;
        
        private DeviceModeDisable deviceModeDisableField;
        
        private ChannelNameSetAssign[] channelNameSetAssignmentsField;
        
        private ChannelNameSet[] channelNameSetField;
        
        private object[] itemsField;
        
        private string nameField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public DeviceModeEnable DeviceModeEnable {
            get {
                return this.deviceModeEnableField;
            }
            set {
                this.deviceModeEnableField = value;
                this.RaisePropertyChanged("DeviceModeEnable");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public DeviceModeDisable DeviceModeDisable {
            get {
                return this.deviceModeDisableField;
            }
            set {
                this.deviceModeDisableField = value;
                this.RaisePropertyChanged("DeviceModeDisable");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=2)]
        [System.Xml.Serialization.XmlArrayItemAttribute("ChannelNameSetAssign", IsNullable=false)]
        public ChannelNameSetAssign[] ChannelNameSetAssignments {
            get {
                return this.channelNameSetAssignmentsField;
            }
            set {
                this.channelNameSetAssignmentsField = value;
                this.RaisePropertyChanged("ChannelNameSetAssignments");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ChannelNameSet", Order=3)]
        public ChannelNameSet[] ChannelNameSet {
            get {
                return this.channelNameSetField;
            }
            set {
                this.channelNameSetField = value;
                this.RaisePropertyChanged("ChannelNameSet");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ControlNameList", typeof(ControlNameList), Order=4)]
        [System.Xml.Serialization.XmlElementAttribute("NoteNameList", typeof(NoteNameList), Order=4)]
        [System.Xml.Serialization.XmlElementAttribute("PatchNameList", typeof(PatchNameList), Order=4)]
        [System.Xml.Serialization.XmlElementAttribute("ValueNameList", typeof(ValueNameList), Order=4)]
        public object[] Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
                this.RaisePropertyChanged("Items");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.midi.org/MIDINameDocument10")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.midi.org/MIDINameDocument10", IsNullable=false)]
    public partial class ChannelNameSetAssignments : object, System.ComponentModel.INotifyPropertyChanged {
        
        private ChannelNameSetAssign[] channelNameSetAssignField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ChannelNameSetAssign", Order=0)]
        public ChannelNameSetAssign[] ChannelNameSetAssign {
            get {
                return this.channelNameSetAssignField;
            }
            set {
                this.channelNameSetAssignField = value;
                this.RaisePropertyChanged("ChannelNameSetAssign");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.midi.org/MIDINameDocument10")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.midi.org/MIDINameDocument10", IsNullable=false)]
    public partial class AvailableForChannels : object, System.ComponentModel.INotifyPropertyChanged {
        
        private AvailableChannel[] availableChannelField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("AvailableChannel", Order=0)]
        public AvailableChannel[] AvailableChannel {
            get {
                return this.availableChannelField;
            }
            set {
                this.availableChannelField = value;
                this.RaisePropertyChanged("AvailableChannel");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.midi.org/MIDINameDocument10")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.midi.org/MIDINameDocument10", IsNullable=false)]
    public partial class MIDICommands : object, System.ComponentModel.INotifyPropertyChanged {
        
        private object[] itemsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("AllNotesOff", typeof(AllNotesOff), Namespace="http://schemas.midi.org/MIDIEvents10", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("AllSoundOff", typeof(AllSoundOff), Namespace="http://schemas.midi.org/MIDIEvents10", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("ChannelKeyPressure", typeof(ChannelKeyPressure), Namespace="http://schemas.midi.org/MIDIEvents10", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("ControlChange", typeof(ControlChange), Namespace="http://schemas.midi.org/MIDIEvents10", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("LocalControl", typeof(LocalControl), Namespace="http://schemas.midi.org/MIDIEvents10", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("MonoMode", typeof(MonoMode), Namespace="http://schemas.midi.org/MIDIEvents10", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("NoteOff", typeof(NoteOff), Namespace="http://schemas.midi.org/MIDIEvents10", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("NoteOn", typeof(NoteOn), Namespace="http://schemas.midi.org/MIDIEvents10", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("OmniOff", typeof(OmniOff), Namespace="http://schemas.midi.org/MIDIEvents10", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("OmniOn", typeof(OmniOn), Namespace="http://schemas.midi.org/MIDIEvents10", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("PitchBendChange", typeof(PitchBendChange), Namespace="http://schemas.midi.org/MIDIEvents10", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("PolyKeyPressure", typeof(PolyKeyPressure), Namespace="http://schemas.midi.org/MIDIEvents10", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("PolyMode", typeof(PolyMode), Namespace="http://schemas.midi.org/MIDIEvents10", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("ProgramChange", typeof(ProgramChange), Namespace="http://schemas.midi.org/MIDIEvents10", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("ResetAllControllers", typeof(ResetAllControllers), Namespace="http://schemas.midi.org/MIDIEvents10", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("SysEx", typeof(SysEx), Namespace="http://schemas.midi.org/MIDIEvents10", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("MIDIDelay", typeof(MIDIDelay), Order=0)]
        public object[] Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
                this.RaisePropertyChanged("Items");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.midi.org/MIDINameDocument10")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.midi.org/MIDINameDocument10", IsNullable=false)]
    public partial class PatchMIDICommands : object, System.ComponentModel.INotifyPropertyChanged {
        
        private object[] itemsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("AllNotesOff", typeof(AllNotesOff), Namespace="http://schemas.midi.org/MIDIEvents10", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("AllSoundOff", typeof(AllSoundOff), Namespace="http://schemas.midi.org/MIDIEvents10", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("ChannelKeyPressure", typeof(ChannelKeyPressure), Namespace="http://schemas.midi.org/MIDIEvents10", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("ControlChange", typeof(ControlChange), Namespace="http://schemas.midi.org/MIDIEvents10", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("LocalControl", typeof(LocalControl), Namespace="http://schemas.midi.org/MIDIEvents10", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("MonoMode", typeof(MonoMode), Namespace="http://schemas.midi.org/MIDIEvents10", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("NoteOff", typeof(NoteOff), Namespace="http://schemas.midi.org/MIDIEvents10", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("NoteOn", typeof(NoteOn), Namespace="http://schemas.midi.org/MIDIEvents10", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("OmniOff", typeof(OmniOff), Namespace="http://schemas.midi.org/MIDIEvents10", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("OmniOn", typeof(OmniOn), Namespace="http://schemas.midi.org/MIDIEvents10", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("PitchBendChange", typeof(PitchBendChange), Namespace="http://schemas.midi.org/MIDIEvents10", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("PolyKeyPressure", typeof(PolyKeyPressure), Namespace="http://schemas.midi.org/MIDIEvents10", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("PolyMode", typeof(PolyMode), Namespace="http://schemas.midi.org/MIDIEvents10", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("ProgramChange", typeof(ProgramChange), Namespace="http://schemas.midi.org/MIDIEvents10", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("ResetAllControllers", typeof(ResetAllControllers), Namespace="http://schemas.midi.org/MIDIEvents10", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("MIDIDelay", typeof(MIDIDelay), Order=0)]
        public object[] Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
                this.RaisePropertyChanged("Items");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
}
